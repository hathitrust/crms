#!/usr/bin/perl

BEGIN {
  unshift(@INC, $ENV{'SDRROOT'}. '/crms/cgi');
  unshift(@INC, $ENV{'SDRROOT'}. '/crms/lib');
}

use strict;
use warnings;

use Carp;
use CGI;
use CGI::Cookie;
use Data::Dumper;
use Encode;
use FindBin;
use POSIX;
use Template;
use URI::Escape;

use CRMS;
use Utilities;


#$SIG{__DIE__} =  \&Carp::confess;
#$SIG{__WARN__} = \&Carp::confess;

my $cgi = new CGI;
## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
my $page = $cgi->param('p') || 'home';
my $debug = $cgi->param('debug');
my $crms = CRMS->new(cgi => $cgi);
my $redirect;
my $cookie;
my $uri = $ENV{'REQUEST_URI'};
$uri =~ s/&/;/g;
my $target = uri_escape_utf8('https://'. $ENV{'HTTP_HOST'}. $uri);
if (!$crms->get('remote_user'))
{
  $redirect = 'https://'. $ENV{'HTTP_HOST'}. "/cgi/wayf?target=$target";
}
if ($crms->get('stepup_redirect'))
{
  $redirect = $crms->get('stepup_redirect');
}
my $user = $crms->GetUser();
my $alias_user_id = undef;


my $debug_note = '';
# Alias stuff is for dev only.
if ($crms->Instance() eq 'dev' && defined $user) {
  # Set cookie if changing to user.
  if (defined $cgi->param('changeuser') && $cgi->param('changeuser') == 1) {
    $alias_user_id = $cgi->param('newuser');
    $cgi->delete_all();
  }
  if (!defined $alias_user_id) {
    $alias_user_id = $cgi->cookie('alias_user_id');
  }
  if (defined $alias_user_id) {
    $crms->SetAlias($alias_user_id);
    if (defined $crms->get('alias_user_id')) {
      $user = $crms->GetUser($crms->get('alias_user_id'));
      $cookie = CGI::Cookie->new(-name     => 'alias_user_id',
                                 -value    =>  $alias_user_id,
                                 -expires  =>  '+3M',
                                 -samesite => 'Strict');
    }
  }
}

if ($page eq 'Logout')
{
  # Remove all locks for this user.
  # If we're aliased, we don't log out, we just drop the alias.
  $crms->UnlockAllItemsForUser();
  if ($crms->get('alias_user_id')) {
    $crms->SetAlias();
    $user = $crms->GetUser();
    $cookie = CGI::Cookie->new(-name     => 'alias_user_id',
                               -value    =>  '',
                               -expires  =>  '-3M',
                               -samesite => 'Strict');
    $cgi->delete_all();
  }
  else
  {
    my $central = $crms->get('logout');
    # FIXME: is this still used?
    my $service = $ENV{'COSIGN_SERVICE'};
    if ($service)
    {
      print("Set-Cookie: $service=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n");
    }
    $target =~ s/logout/home/gi;
    $redirect = $central. $target;
  }
}

if ($redirect)
{
  if ($crms->GetSystemVar('logAuth'))
  {
    my $db = $crms->AuthDebugData();
    $crms->Note($db);
  }
  print $cgi->redirect($redirect);
  exit(0);
}

if ($cgi->param('download'))
{
  use Downloads;
  Downloads::Download($crms, $cgi);
  exit(0);
}

### Review submission: all projects go through here.
if ($page eq 'finishReview')
{
  my $editing = $cgi->param('editing');
  my $id = $cgi->param('htid');
  my $err;
  my $action = $cgi->param('submit');
  if ($action eq 'Cancel' || !$action)
  {
    $crms->UnlockItem($id, $user);
    $cgi->delete_all();
  }
  else
  {
    my $stat = $crms->GetSystemStatus();
    my $status = $stat->[1];
    if ($status ne 'normal')
    {
      $err = "CRMS is not currently accepting reviews (status '$status'). Please Cancel.";
    }
    if (!$err)
    {
      $err = $crms->SubmitReviewCGI($id, $user, $cgi);
    }
    if ($err)
    {
      $crms->ClearErrors();
      $cgi->param('errorMsg', $err);
      $cgi->param('p', 'review');
    }
    else
    {
      $cgi->delete_all();
      $cgi->param('p', 'review');
    }
  }
  if ($editing && !$err)
  {
    print "Content-type: text/html\n\n";
    print '<script type="text/javascript">window.close();</script>';
    exit(0);
  }
}

my %ips = %{$crms->GetUserIPs()};
if (scalar keys %ips) {
  my $ip = $ENV{'REMOTE_ADDR'};
  if (!defined $ips{$ip} && !defined $ips{'mfa'} &&
      ($user->is_reviewer() || $user->is_advanced() || $user->is_expert())) {
    $cgi->param('REMOTE_ADDR', $ip);
    $page = 'ip';
  }
}

my $exp = $crms->IsUserExpired($user);
$debug_note .= sprintf "EXPIRED %s\n", Dumper $exp;
foreach my $err (@{$crms->GetErrors()}) {
  $debug_note .= sprintf "ERR %s\n", $err ;
}
$page = 'expired' if $exp->{'status'} == 1;
if (length $page)
{
  $crms->Note(sprintf "ACCESS CHECK with %s", Dumper $crms->get('user'));
  my $dbc = $crms->AccessCheck($page);
  if (defined $dbc)
  {
    $page = 'denied';
    $cgi->param('dbc_err', $dbc->{'err'});
    $cgi->param('dbc_page', $dbc->{'page'});
  }
}

my $input = $page . '.tt';
$input = 'home.tt' unless -f $input;

## config options for TT
my $config =
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
    ENCODING     => 'UTF-8'
};

my $tt = Template->new($config);
my $vars = {
    crms         => $crms,
    cgi          => $cgi,
    current_user => $user,
    utils        => Utilities->new()
};

print $cgi->header(-charset => 'utf-8',
                   -Cache_control => 'no-cache, no-store, must-revalidate',
                   -expires => '-1m',
                   -cookie => $cookie);
if (!$tt->process($input, $vars))
{
  printf "<h3>%s</h3>\n", $tt->error();
  die $tt->error();
}

if ($debug)
{
  print "<h3>Debug Information</h3>";
  if ($debug_note) {
    print "<h4>Debug Note</h4>";
    print "<pre>$debug_note</pre>\n";
  }
  eval {
    my $db = $crms->AuthDebugData(1);
  print <<END;
<div>
    <h2>Auth Debug</h2>
    <span style="color:black;"><code>$db</code></span>
  </div>
END
    printf 'Host: <b>%s</b><br/>', `hostname`;
    my $dbinfo = $crms->DbInfo();
    $dbinfo =~ s/\n/<br\/>/g;
    print "<i>$dbinfo</i><br/>\n";
    print '<br/><strong>Environment Variables:</strong><br/>';
    foreach my $k (sort keys %ENV)
    {
      printf "&nbsp;&nbsp;&nbsp;$k: %s<br/>\n", $ENV{$k};
    }
    print "<br/><strong>Perl ${^V}  Include Paths (for $FindBin::Bin):</strong><br/>";
    foreach my $inc (sort @INC)
    {
      print "&nbsp;&nbsp;&nbsp;$inc<br/>\n";
    }
    print "<br/><strong>CRMS Variables:</strong><br/>\n";
    foreach my $k (sort keys %{$crms})
    {
      printf "&nbsp;&nbsp;&nbsp;$k: %s<br/>\n", $crms->get($k) || '<undef>';
    }
  };
  print "<i>Error printing debug information:</i> <code>$@</code>\n" if $@;
}

