#!/usr/bin/perl

use strict;
use FindBin;
use lib $FindBin::Bin;
use CGI;
use CRMS;
use Encode;
use POSIX;
use Template;
use URI::Escape;
use Data::Dumper;

my $cgi  = new CGI;
my $sys =  $cgi->param('sys');
$sys = 'crms' unless $sys;
my $page = $cgi->param('p');
my $pdb = $cgi->param('pdb');
my $tdb = $cgi->param('tdb');
my $debugAuth = $cgi->param('debugAuth');
my $debugSql = $cgi->param('debugSql');
my $debugVar = $cgi->param('debugVar');
my $debug = $cgi->param('debug');
my $crms = CRMS->new(
        cgi       => $cgi,
        sys       => $sys,
        verbose   => 0,
        pdb       => $pdb,
        tdb       => $tdb,
        debugAuth => $debugAuth,
        debugSql  => $debugSql,
        debugVar  => $debugVar
        );
my $redirect;
my $uri = $ENV{'REQUEST_URI'};
$uri =~ s/&/;/g;
my $target = uri_escape_utf8('https://'. $ENV{'HTTP_HOST'}. $uri);
if (!$crms->get('remote_user'))
{
  $redirect = 'https://'. $ENV{'HTTP_HOST'}. "/cgi/wayf?target=$target";
}
if ($crms->get('stepup') && $crms->get('stepup_redirect'))
{
  $redirect = $crms->get('stepup_redirect');
}
if ($page eq 'Logout')
{
  # Remove all locks for this user.
  # If we're aliased, we don't log out, we just drop the alias.
  my $alias = $crms->GetAlias();
  if ($alias)
  {
    $crms->UnlockAllItemsForUser($alias);
    $crms->SetAlias();
    $cgi->delete_all();
  }
  else
  {
    $crms->UnlockAllItemsForUser();
    my $central = $crms->get('logout');
    # FIXME: appears to be unneeded on HT infrastructure.
    my $service = $ENV{'COSIGN_SERVICE'};
    if ($service)
    {
      print("Set-Cookie: $service=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n");
    }
    $target =~ s/logout/home/gi;
    $redirect = $central. $target;
  }
}
elsif ($cgi->param('changeuser') == 1)
{
  $crms->SetAlias(undef, $cgi->param('newuser'));
  $cgi->delete_all();
}
my $user = $crms->get('user');

### Review submission: all projects go through here.
if ($page eq 'finishReview')
{
  my $editing = $cgi->param('editing');
  my $id = $cgi->param('htid');
  my $err;
  my $action = $cgi->param('submit');
  if ($action eq 'Cancel' || !$action)
  {
    $crms->UnlockItem($id, $user);
    $cgi->delete_all();
  }
  else
  {
    my $stat = $crms->GetSystemStatus();
    my $status = $stat->[1];
    # FIXME: it would be more intuitive if GetSystemStatus() returned undef for normal.
    $err = "CRMS is not currently accepting reviews (status '$status'). Please Cancel." if $stat->[1] ne 'normal';
    if (!$err)
    {
      $err = $crms->SubmitReviewCGI($id, $user, $cgi);
    }
    if ($err)
    {
      $crms->ClearErrors();
      $cgi->param('errorMsg', $err);
      $cgi->param('p', 'review');
    }
    else
    {
      $cgi->delete_all();
      $cgi->param('p', 'review');
    }
  }
  if ($editing && !$err)
  {
    print "Content-type: text/html\n\n";
    print '<script type="text/javascript">window.close();</script>';
    exit(0);
  }
}

$cgi->param('sys', $sys) if $sys and $sys ne 'crms';

if ($redirect && !$debugAuth)
{
  $crms->Note($redirect);
  print $cgi->redirect($redirect);
  exit(0);
}

if ($cgi->param('download'))
{
  use Downloads;
  exit if 1 == Downloads::Download($crms, $cgi);
}

## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
$page = $cgi->param('p') || 'home';
if (!$crms->GetAlias())
{
  my %ips = %{$crms->GetUserIPs()};
  if (scalar keys %ips)
  {
    my $ip = $ENV{'REMOTE_ADDR'};
    if (!defined $ips{$ip} &&
        !defined $ips{'mfa'} &&
        ($crms->IsUserReviewer() ||
         $crms->IsUserAdvanced() ||
         $crms->IsUserExpert()))
    {
      $cgi->param('REMOTE_ADDR', $ip);
      $page = 'ip';
    }
  }
}
my $exp = $crms->IsUserExpired($user);
$page = 'expired' if $exp->{'status'} == 1;
if (length $page)
{
  my $dbc = $crms->AccessCheck($page);
  if (defined $dbc)
  {
    $page = 'denied';
    $cgi->param('dbc_err', $dbc->{'err'});
    $cgi->param('dbc_page', $dbc->{'page'});
  }
}

my $input = $page . '.tt';
$input = 'home.tt' unless -f $input;

## config options for TT
my $config =
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
    ENCODING     => 'UTF-8'
};

my $tt   = Template->new($config);
my $vars = {
    title     => $crms->System(),
    crms      => $crms,
    cgi       => $cgi,
    user      => $user,
    project   => $crms->GetUserCurrentProject(),
    env       => $ENV,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

print $cgi->header(-charset => 'utf-8', 'cache-control' => 'private');
if (!$tt->process($input, $vars))
{
  printf "<h3>%s</h3>\n", $tt->error();
  die $tt->error();
}
print $crms->Debug();
if ($debugAuth)
{
  my $db = $crms->AuthDebugData(1);
  print <<END;
<div>
    <h2>Auth Debug</h2>
    <span style="color:black;"><code>$db</code></span>
  </div>
END
}

if ($debug)
{
  print "<h3>Debug Information</h3>";
  printf 'Host: <b>%s</b><br/>', `hostname`;
  my $dbinfo = $crms->DbInfo();
  $dbinfo =~ s/\n/<br\/>/g;
  print "<i>$dbinfo</i><br/>\n";
  print '<br/><strong>Environment Variables:</strong><br/>';
  eval {
    foreach my $k (sort keys %ENV)
    {
      printf "&nbsp;&nbsp;&nbsp;$k: %s<br/>\n", $ENV{$k};
    }
  };
  print "<br/><strong>Perl $] Include Paths (for $FindBin::Bin):</strong><br/>";
  eval {
    foreach my $inc (sort @INC)
    {
      print "&nbsp;&nbsp;&nbsp;$inc<br/>\n";
    }
  };
  print "<br/><strong>CRMS Variables:</strong><br/>\n";
  eval {
    foreach my $k (sort keys %{$crms})
    {
      printf "&nbsp;&nbsp;&nbsp;$k: %s<br/>\n", $crms->get($k);
    }
  };
}

