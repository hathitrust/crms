#!/l/local/bin/perl

my $DLXSROOT;
my $DLPS_DEV;
BEGIN 
{ 
    $DLXSROOT = $ENV{'DLXSROOT'}; 
    $DLPS_DEV = $ENV{'DLPS_DEV'}; 
    ## unshift ( @INC, $ENV{'DLXSROOT'} . "/crms/cgi" );
}

use strict;
use CGI;
use CRMS;
use Template;
use POSIX;

my $cgi  = new CGI;
my $user = $ENV{'REMOTE_USER'};

if ($user eq "") 
{   
    my $url = $ENV{'HTTP_HOST'} . $ENV{'SCRIPT_NAME'};
    print $cgi->redirect( "https://$url" );
    exit;
}

my $page = $cgi->param('p');
my $input;
if    ( $page eq "review" )         { $input = 'review.tt';        }
elsif ( $page eq "editReviews" )    { $input = 'editReviews.tt';   }
elsif ( $page eq "admin" )          { $input = 'admin.tt';         }
elsif ( $page eq "adminUser" )      { $input = 'adminUser.tt';     }
elsif ( $page eq "adminEditUser" )  { $input = 'adminEditUser.tt'; }
elsif ( $page eq "adminQueue" )     { $input = 'adminQueue.tt';    }
elsif ( $page eq "adminReviews" )   { $input = 'adminReviews.tt';  }
elsif ( $page eq "unlockItem" )     { $input = 'unlockItem.tt';    }
elsif ( $page eq "expert" )         { $input = 'expert.tt';        }
elsif ( $page eq "logout" )         { $input = 'logout.tt';        }
elsif ( $page eq "confirmReview" )  { $input = 'confirmReview.tt'; }
elsif ( $page eq "submitReview" )   { $input = 'submitReview.tt';  }
elsif ( $page eq "deleteReview" )   { $input = 'deleteReview.tt';  }
else                                { $input = 'home.tt';          }

## config options for TT
my $config = 
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
};

my $tt    = Template->new( $config );
my $vars  = 
{
    title => "CRMS",
    crms  => CRMS->new(
        logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $user,
    ),
    cgi       => $cgi,
    user      => $user,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

print $cgi->header( -charset => 'utf-8' );
$tt->process($input, $vars) || die $tt->error();

