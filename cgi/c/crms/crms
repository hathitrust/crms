#!/usr/bin/perl

my ($DLXSROOT, $DLPS_DEV);
BEGIN { $DLXSROOT = $ENV{'DLXSROOT'}; $DLPS_DEV = $ENV{'DLPS_DEV'}; }

use strict;
use CGI;
use CRMS;
use Template;
use POSIX;
use Encode;

my $cgi  = new CGI;
my $sys =  $cgi->param('sys');
$sys = 'crms' unless $sys;
my $page = $cgi->param('p');
my $crms = CRMS->new(
        logFile => $DLXSROOT. '/prep/c/crms/log_review.txt',
        sys     => $sys,
        verbose => 0,
        root    => $DLXSROOT,
        dev     => $DLPS_DEV,
        pdb     => $cgi->param('pdb'),
        );

if ($page eq 'Logout')
{
  # Remove all locks for this user.
  # If we're aliased, we don't log out, we just drop the alias.
  my $alias = $crms->GetAlias();
  if ($alias)
  {
    $crms->UnlockAllItemsForUser($alias);
    $crms->SetAlias();
    $cgi->delete_all();
  }
  else
  {
    $crms->UnlockAllItemsForUser();
    # change 'central' to the url of your weblogin server.
    my $central = "https://weblogin.umich.edu/cgi-bin/logout";
    my $query_string = '';
    # expire and nullify service cookie
    print( "Set-Cookie: $ENV{ COSIGN_SERVICE }=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n" );
    if ( $ENV{ QUERY_STRING } =~ m|^(https?://.*)$| )
    {
      $query_string = "?$1";
    }
    # perform any local cleanup here
    # redirect to central weblogin server
    print("Location: $central$query_string\n\n");
    exit(0);
  }
}
elsif ($cgi->param('changeuser') == 1)
{
  $crms->SetAlias(undef, $cgi->param('newuser'));
  $cgi->delete_all();
}
my $user = $crms->get('user');

if ($page eq 'confirmReview')
{
  my $editing = $cgi->param('editing');
  my $oneoff  = $cgi->param('oneoff');
  my $id = $cgi->param('barcode');
  my $err;
  my $action = $cgi->param('submit');
  if ($action eq 'Cancel' || $action eq 'Sequester')
  {
    $crms->UnlockItem($id, $user);
    $cgi->delete_all();
    if ($action eq 'Sequester' && $crms->IsUserSuperAdmin($user))
    {
      $crms->Sequester($id);
      $cgi->param('p', ($oneoff)?'oneoff':'review');
    }
  }
  else
  {
    my $EncRights = $cgi->param('rights');
    my $note      = Encode::decode("UTF-8", $cgi->param('note'));
    my $category  = $cgi->param('category');
    my $renNum    = $cgi->param('renNum');
    my $renDate   = $cgi->param('renDate');
    my $hold      = $cgi->param('hold');
    my $swiss     = $cgi->param('swiss');
    my $pre       = $cgi->param('prepopulated');
    my $start     = $cgi->param('start');
    my ($rights, $reason);
    $err = 'You must select a rights/reason combination.' unless $EncRights;
    if (!$err)
    {
      ($rights, $reason) = $crms->GetAttrReasonFromCode($EncRights);
      $err = $crms->HasItemBeenReviewedByTwoReviewers($id, $user);
      $err = $crms->ValidateSubmission($id, $user, $rights, $reason, $note, $category,
                                       $renNum, $renDate, $oneoff) unless $err;
      my $stat = $crms->GetSystemStatus();
      # Actually, this never gets displayed, but that's OK
      my $status = $stat->[1];
      $err = "The CRMS is not currently accepting reviews (status '$status'). Please Cancel." if $stat->[1] ne 'normal';
    }
    if (!$err)
    {
      #Process the submission, and go on to the next item
      $crms->SubmitReview($id, $user, $rights, $reason, $note, $renNum, $crms->IsUserExpert($user),
                          $renDate, $category, $swiss, $hold, $pre, $start);
      my $ref = $crms->GetErrors();
      $err = $ref->[0] if $ref && $ref->[0];
    }
    if ($err)
    {
      $crms->ClearErrors();
      $cgi->param('errorMsg', $err);
      $cgi->param('p', ($oneoff)?'oneoff':'review');
    }
    else
    {
      $crms->PropagateTheFormula($id, $user) if $action eq 'Propagate';
      # Unused parameter to support submitting last review before leaving the system.
      my $home = $cgi->param('subHome');
      $cgi->delete_all();
      if (!$home)
      {
        $cgi->param('p', ($oneoff)?'oneoff':'review');
      }
    }
  }
  if ($editing && !$err)
  {
    print "Content-type: text/html\n\n";
    print '<script type="text/javascript">window.close();</script>';
  }
}
elsif ($page eq 'confirmCorrection')
{
  my $editing = $cgi->param('editing');
  my $id = $cgi->param('barcode');
  my $err;
  if ($cgi->param('submit') eq 'Cancel')
  {
    $crms->UnlockItem($id, $user, $page);
    $cgi->delete_all();
  }
  else
  {
    my $stat = $crms->GetSystemStatus();
    my $status = $stat->[1];
    $err = "The CRMS is not currently accepting corrections (status '$status'). Please Cancel." if $stat->[1] ne 'normal';
    if (!defined $err)
    {
      use Corrections;
      $err = Corrections::ConfirmCorrection($crms, $id, $user, $cgi);
    }
    if ($err)
    {
      $cgi->param('errorMsg', $err);
      $crms->ClearErrors();
    }
    else
    {
      $cgi->delete_all();
      $cgi->param('p', 'corrections' );
    }
  }
  if ($editing && !$err)
  {
    print "Content-type: text/html\n\n";
    print '<script type="text/javascript">window.close();</script>';
  }
}

$cgi->param('sys', $sys) if $sys and $sys ne 'crms';
# FIXME: stick these in a Downloads.pm module.
if ($cgi->param('download'))
{
  my $order            = $cgi->param('order');
  my $dir              = $cgi->param('dir');
  my $search1          = $cgi->param('search1');
  my $search1value     = $cgi->param('search1value');
  my $op1              = $cgi->param('op1');
  my $search2          = $cgi->param('search2');
  my $search2value     = $cgi->param('search2value');
  my $op2              = $cgi->param('op2');
  my $search3          = $cgi->param('search3');
  my $search3value     = $cgi->param('search3value');
  my $startDate        = $cgi->param('startDate');
  my $endDate          = $cgi->param('endDate');
  my $stype            = $cgi->param('stype');
  my $q                = $cgi->param('q');
  my $success = 1;

  if ($page eq 'retrieve')
  {
    $crms->DownloadVolumeIDs($q)
  }
  elsif ($page eq 'queue')
  {
    $success = $crms->SearchAndDownloadQueue($order, $dir, $search1, $search1value, $op1,
                                             $search2, $search2value, $startDate, $endDate);
  }
  elsif ($page eq 'determinationStats')
  {
    my $monthly = $cgi->param('monthly');
    my $priority = $cgi->param('priority');
    my $pre = $cgi->param('pre');
    $success = $crms->SearchAndDownloadDeterminationStats($startDate, $endDate, $monthly, $priority, $pre);
  }
  elsif ($page =~ m/userrate/i)
  {
    my $user        = $cgi->param('user');
    my $cumulative  = $cgi->param('cumulative');
    my $year        = $cgi->param('year');
    my $inval       = $cgi->param('inval');
    my $nononexpert = $cgi->param('nne');

    $success = $crms->DownloadUserStats($page, $user, $cumulative, $year, $inval, $nononexpert);
  }
  elsif ($page eq 'exportData')
  {
    $success = $crms->SearchAndDownloadExportData($order, $dir, $search1, $search1value, $op1,
                                                  $search2, $search2value, $startDate, $endDate);
  }
  else
  {
    $success = $crms->SearchAndDownload($page, $order, $dir, $search1, $search1value, $op1,
                                        $search2, $search2value, $op2, $search3, $search3value,
                                        $startDate, $endDate, $stype);
  }
  if ($success)
  {
    exit;
  }
}

## config options for TT
my $config =
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
    ENCODING     => 'UTF-8'
};

my $tt   = Template->new($config);
my $vars = {
    title     => $crms->System(),
    crms      => $crms,
    cgi       => $cgi,
    user      => $user,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
$page = $cgi->param('p') || '';
if (!$crms->GetAlias())
{
  my $ip = $ENV{'REMOTE_ADDR'};
  $cgi->param('REMOTE_ADDR', $ip);
  my %ips = %{$crms->GetUserIPs()};
  if (scalar keys %ips)
  {
    if (!defined $ips{$ip} && !$crms->IsUserAdmin())
    {
      $page = 'ip';
    }
  }
}
if ($crms->IsUserExpired($user))
{
  $page = 'expired';
}
if (length $page)
{
  my $dbc = $crms->AccessCheck($page);
  if (defined $dbc)
  {
    $page = 'denied';
    $cgi->param('dbc', $dbc);
  }
}
my $input = $page . '.tt';
$input = 'home.tt' unless -f $input;

print $cgi->header(-charset => 'utf-8', 'cache-control' => 'private');
if (!$tt->process($input, $vars))
{
  printf "<h3>%s</h3>\n", $tt->error();
  die $tt->error();
}
if ($cgi->param('debug'))
{
  print '<br/><br/>';
  printf 'Host: <b>%s</b><br/>', `hostname`;
  eval {
    foreach my $k (keys %ENV)
    {
      printf "$k: %s<br/>\n", $ENV{$k};
    }
  }
}

