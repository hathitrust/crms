#!../../../bin/symlinks/perl

my ($DLXSROOT, $DLPS_DEV);
BEGIN { $DLXSROOT = $ENV{'DLXSROOT'}; $DLPS_DEV = $ENV{'DLPS_DEV'}; }

use strict;
use CGI;
use CRMS;
use Template;
use POSIX;

# !/l/local/bin/perl

my $ru = $ENV{'REMOTE_USER'};
my $cgi  = new CGI;
my $crms = CRMS->new(
        logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $ru,
        );
my $alias = $crms->GetAliasUserName( $ru );

if ( $cgi->param('p') eq 'Logout' )
{
  #Remove all locks for this user.
  # If we're aliased, we don't log out, we just drop the alias.
  if ($alias && $alias ne $ru)
  {
    $crms->UnlockAllItemsForUser( $alias );
    $cgi->param('changeuser', 1);
    $cgi->param('newuser', $ru);
  }
  else
  {
    $crms->UnlockAllItemsForUser( $ru );
    
    # change 'central' to the url of your weblogin server.
    my $central = "https://weblogin.umich.edu/cgi-bin/logout";
    my $query_string = "";

    # expire and nullify service cookie
    print( "Set-Cookie: $ENV{ COSIGN_SERVICE }=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n" );

    if ( $ENV{ QUERY_STRING } =~ m|^(https?://.*)$| ) {
      $query_string = "?$1";
    }

    # perform any local cleanup here

    # redirect to central weblogin server
    print( "Location: $central$query_string\n\n" );

    exit( 0 );
  }
}

if ( $cgi->param('changeuser') == 1 )  
{
  $alias = $cgi->param('newuser');
  if ($crms->GetUserName($alias))
  {
    if ($alias eq $ru)
    {
      $crms->ChangeAliasUserName($ru, '');
    }
    else
    {
      $crms->ChangeAliasUserName($ru, $alias);
    }
  }
  $cgi->delete_all();
}
my $user = ($alias)? $alias:$ru;
if ($user ne $ru)
{
  $crms = CRMS->new(
            logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
            configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
            verbose      =>   0,
            root         =>   $DLXSROOT,
            dev          =>   $DLPS_DEV,
            user         =>   $user,
            );
}

if ( $cgi->param('p') eq 'confirmReview' )  
{
  my $editing = $cgi->param('editing');
  if ($cgi->param( 'submit' ) eq 'Cancel')
  {
    my $id = $cgi->param('barcode');
    $crms->UnlockItem( $id, $user);
    $cgi->delete_all();
    if ( $editing )
    {
      my $output = qq(<script type="text/javascript" language="JavaScript">window.close();</script>);
      print "Content-type: text/html\n\n";
      print $output;
    }
  }
  else
  {
    #Remove all locks for this user.
    my $EncRights  = $cgi->param('rights');
    my $comment    = $cgi->param('comment');
    my $category   = $cgi->param('category');
    my $renNum     = $cgi->param('renNum');
    my $renDate    = $cgi->param('renDate');
    my $id         = $cgi->param('barcode');
    my $question   = $cgi->param('question');
    my $swiss      = $cgi->param('swiss');

    my ( $rights, $reason ) = $crms->GetAttrReasonFromCode($EncRights);
    my $errorMsg = $crms->HasItemBeenReviewedByTwoReviewers($id, $user);
    $errorMsg = $crms->ValidateSubmission2($id, $user, $rights, $reason, $comment, $category, $renNum, $renDate) unless $errorMsg;
    my $stat = $crms->GetSystemStatus();
    # Actually, this never gets displayed, but that's OK
    my $status = $stat->[1];
    $errorMsg = "The CRMS is not currently accepting reviews (status '$status'). Please Cancel." if $stat->[1] ne 'normal';
    if ($errorMsg)
    {
      #clear the cgi
      $cgi->delete_all();
      $cgi->param('p', 'review' );
      $cgi->param('errorMsg', $errorMsg );
      $cgi->param('barcode',  $id );
      $cgi->param('rights',   $EncRights);
      $cgi->param('reason',   $reason);
      $cgi->param('comm',     $comment );
      $cgi->param('category', $category);
      $cgi->param('renNum',   $renNum );
      $cgi->param('renDate',  $renDate);
      $cgi->param('editing',  $editing);
      $cgi->param('question', $question);
      $cgi->param('swiss',    $swiss);
    }
    else
    {
      #Process the submission, and go on to the next item
      my $id = $cgi->param('barcode');
      my $expert;
      if ( $crms->IsUserExpert( $user ) ) { $expert = 2; }

      $crms->SubmitReview($id, $user, $rights, $reason, $comment, $renNum, $expert, $renDate, $category, $swiss, $question);
      my $ref = $crms->GetErrors();
      if ($ref && $ref->[0])
      {
        $errorMsg = $ref->[0];
        #clear the cgi
        $cgi->delete_all();
        $cgi->param('p', 'review' );
        $cgi->param('errorMsg', $errorMsg );
        $cgi->param('barcode',  $id );
        $cgi->param('rights',   $EncRights);
        $cgi->param('reason',   $reason);
        $cgi->param('comm',     $comment );
        $cgi->param('category', $category);
        $cgi->param('renNum',   $renNum );
        $cgi->param('renDate',  $renDate);
        $cgi->param('editing',  $editing);
        $cgi->param('question', $question);
        $cgi->param('swiss',    $swiss);
        $crms->ClearErrors();
      }
      else
      {
        $cgi->delete_all();
        if ( $editing )
        {
          my $output = qq(<script type="text/javascript" language="JavaScript">window.close();</script>);
          print "Content-type: text/html\n\n";
          print $output;
        }
        else
        {
          $cgi->param('p', 'review' );
        }
      }
    }
  }
}


if ( $cgi->param('download') )  
{
  my $order            = $cgi->param('order');
  my $dir              = $cgi->param('dir');
  my $search1          = $cgi->param('search1');
  my $search1value     = $cgi->param('search1value');
  my $op1              = $cgi->param('op1');
  my $search2          = $cgi->param('search2');
  my $search2value     = $cgi->param('search2value');
  my $op2              = $cgi->param('op2');
  my $search3          = $cgi->param('search3');
  my $search3value     = $cgi->param('search3value');
  my $startDate        = $cgi->param('startDate');
  my $endDate          = $cgi->param('endDate');
  my $stype            = $cgi->param('stype');
  my $page             = $cgi->param('p');
  my $q                = $cgi->param('q');
  my $success = 1;

  if ($page eq 'retrieve')
  {
    $crms->DownloadVolumeIDs($q)
  }
  elsif ($page eq 'queue')
  {
    $success = $crms->SearchAndDownloadQueue( $order, $dir, $search1, $search1value, $op1, $search2, $search2value, $startDate, $endDate );
  }
  elsif ($page eq 'determinationStats')
  {
    my $monthly = $cgi->param('monthly');
    my $priority = $cgi->param('priority');
    my $pre = $cgi->param('pre');
    $success = $crms->SearchAndDownloadDeterminationStats( $startDate, $endDate, $monthly, $priority, $pre );
  }
  elsif ($page =~ m/userrate/i)
  {
    my $page        = $cgi->param('p');
    my $user        = $cgi->param('user');
    my $cumulative  = $cgi->param('cumulative');
    my $year        = $cgi->param('year');
    my $inval       = $cgi->param('inval');
    my $nononexpert = $cgi->param('nne');
    
    $success = $crms->DownloadUserStats( $page, $user, $cumulative, $year, $inval, $nononexpert );
  }
  else
  {
    $success = $crms->SearchAndDownload( $page, $order, $dir, $search1, $search1value, $op1, $search2, $search2value, $op2, $search3, $search3value, $startDate, $endDate, $stype );
  }
  if ( $success )
  {
    exit;
  }
}

## config options for TT
my $config = 
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
    ENCODING     => 'UTF-8',

};

## make sure user known
if ( ! $crms->GetUserName($user) )
{
    print $cgi->header( -status => "403 Forbidden" ) .
          "<h2>Forbidden</h2> (unknown user '$user')";
    exit;
}

my $tt   = Template->new( $config );
my $vars = {
    title     => "CRMS",
    crms      => $crms,
    cgi       => $cgi,
    user      => $user,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
my $page  = $cgi->param('p');
my $input = $page . ".tt";
$input = 'home.tt' unless -f $input;

print $cgi->header( -charset => 'utf-8', 'cache-control' => 'private' );
$tt->process($input, $vars) || die $tt->error();
if ($cgi->param('debug'))
{
  print '<br/><br/>';
  printf '<b>%s</b><br/>', `hostname`;
  eval {
    foreach my $k (keys %ENV)
    {
      printf "$k: %s<br/>\n", $ENV{$k};
    }
  }
}

