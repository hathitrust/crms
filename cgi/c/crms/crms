#!/l/local/bin/perl

my ($DLXSROOT, $DLPS_DEV);
BEGIN { $DLXSROOT = $ENV{'DLXSROOT'}; $DLPS_DEV = $ENV{'DLPS_DEV'}; }

use strict;
use CGI;
use CRMS;
use Template;
use POSIX;

my $user = $ENV{'REMOTE_USER'};

my $cgi  = new CGI;
my $crms = CRMS->new(
        logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $user,
        );

if  (  $cgi->param('p') eq 'Logout' )  
{
  #Remove all locks for this user.
  $crms->UnlockAllItemsForUser( $user );

  #Remove all alias users for this user:
  $crms->ChangeAliasUserName($user, '');

  # change 'central' to the url of your weblogin server.
  my $central = "https://weblogin.umich.edu/cgi-bin/logout";
  my $query_string = "";
  
  # expire and nullify service cookie
  print( "Set-Cookie: $ENV{ COSIGN_SERVICE }=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n" );
  
  if ( $ENV{ QUERY_STRING } =~ m|^(https?://.*)$| ) {
    $query_string = "?$1";
  }

  # perform any local cleanup here
  
  # redirect to central weblogin server
  print( "Location: $central$query_string\n\n" );

  
  exit ( 0 );

}


my $new_user = $crms->GetAliasUserName( $user );  
if ( ( $new_user ) )
{
  $user = $new_user;

  $crms = CRMS->new(
	logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $user,
        );
}
elsif  (  $cgi->param('changeuser') == 1 )  
{
  my $new_user = $cgi->param('newuser');
  $crms->ChangeAliasUserName($user, $new_user);  
  $user = $new_user;

  $crms = CRMS->new(
	logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $user,
        );
}


if  (  $cgi->param('p') eq 'confirmReview' )  
{

  if ($cgi->param( 'submit' ) eq 'Cancel')
  {
    my $id         = $cgi->param('barcode');
    $crms->UnlockItem( $id, $user);
    $cgi->delete_all();
  }
  else
  {
    #Remove all locks for this user.
    my $rights     = $cgi->param('rights');
    my $reason     = $cgi->param('reason');
    my $comment    = $cgi->param('comment');
    my $category   = $cgi->param('category');
    my $renNum     = $cgi->param('renNum');
    my $regDate    = $cgi->param('regDate');
    my $id         = $cgi->param('barcode');
    my $editing    = $cgi->param('editing');
    my $navright   = $cgi->param('navRight');

    ( $rights, $reason ) = $crms->GetAttrReasonFromCode($rights);

    my $errorMsg = $crms->ValidateSubmission2( $rights, $reason, $comment, $category, $renNum, $regDate, $user );
  
    if ( $errorMsg )
    {
       #clear the cgi
       $cgi->delete_all();
       $cgi->param('p', 'review' );
       $cgi->param('errorMsg', $errorMsg );
       $cgi->param('barcode', $id );
       $cgi->param('navRight', $navright );
     }
     else
     {
       #Process the submission, and go on to the next itme
       my $id     = $cgi->param('barcode');
       my $copyDate;
       my $expert;
       if ( $crms->IsUserExpert ( $user ) ) { $expert = 2; }
      
       $crms->SubmitReview($id, $user, $rights, $reason, $copyDate, $comment, $renNum, $expert, $regDate, $category);
       if  ( $editing )
       {
	 $cgi->delete_all();
       }
       else
       {
	 $cgi->delete_all();
	 $cgi->param('p', 'review' );
	 $cgi->param('navRight', $navright );
       }

     }
  }

}

if  ( (  $cgi->param('p') eq 'queueAdd' )  && ( $cgi->param('id') ) )
{
  my $id = $cgi->param('id');

  # status is 0
  # priority is 2
  my $status = $crms->AddItemToQueue( $id, $crms->GetTodaysDate(), 0, 2 );
  
  my $msg;
  if ( $status )
  {
    $msg = qq{$id was added successfully to the queue.};
  }
  else
  {
    $msg = qq{$id could not be added to the queue.};
  }

  $cgi->param('addMsg', $msg );
  
}



if  (  $cgi->param('download')  )  
{

    my $order              = $cgi->param('order');
    my $direction          = $cgi->param('direction');

    my $search1            = $cgi->param('search1');
    my $search1value       = $cgi->param('search1value');
    my $op1                = $cgi->param('op1');

    my $search2            = $cgi->param('search2');
    my $search2value       = $cgi->param('search2value');

    my $since              = $cgi->param('since');
    my $offset             = $cgi->param('offset');

    my $type               = $cgi->param('type');


    my $success = $crms->SearchAndDownload ( $order, $direction, $search1, $search1value, $op1, $search2, $search2value, $since, $offset, $type );

    if ( $success )
    {
      exit;
    }
}



if ( ! $user || ! $ENV{'HTTPS'} ) 
{
    print $cgi->redirect( "https://$ENV{'HTTP_HOST'}$ENV{'SCRIPT_NAME'}" );
    exit;
}

## config options for TT
my $config = 
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
};

## make sure user known
if ( ! $crms->GetUserName($user) )
{
    print $cgi->header( -status => "403 Forbidden" ) .
          "<h2>Forbidden</h2>";
    exit;
}

my $tt   = Template->new( $config );
my $vars = {
    title     => "CRMS",
    crms      => $crms,
    cgi       => $cgi,
    user      => $user,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
my $page  = $cgi->param('p');
my $input = $page . ".tt";
if ( ! -f $input ) { $input = "home.tt"; }

## print $cgi->header( -charset => 'iso-8859-1', "cache-control" => 'private' );
print $cgi->header( -charset => 'utf-8', "cache-control" => 'private' );
$tt->process($input, $vars) || die $tt->error();

