#!../../../bin/symlinks/perl

my ($DLXSROOT, $DLPS_DEV);
BEGIN { $DLXSROOT = $ENV{'DLXSROOT'}; $DLPS_DEV = $ENV{'DLPS_DEV'}; }

use strict;
use CGI;
use CRMS;
use Template;
use POSIX;

# !/l/local/bin/perl

my $ru = $ENV{'REMOTE_USER'};
my $cgi  = new CGI;
my $crms = CRMS->new(
        logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
        configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
        verbose      =>   0,
        root         =>   $DLXSROOT,
        dev          =>   $DLPS_DEV,
        user         =>   $ru,
        );
my $alias = $crms->GetAliasUserName( $ru );

if  ( $cgi->param('p') eq 'Logout' )
{
  #Remove all locks for this user.
  $crms->UnlockAllItemsForUser( $ru );
  # If we're aliased, we don't log out, we just drop the alias.
  if ($alias ne $ru)
  {
    $cgi->param('changeuser', 1);
    $cgi->param('newuser', $ru);
  }
  else
  {
    #Remove all alias users for this user:
    $crms->ChangeAliasUserName($ru, '');

    # change 'central' to the url of your weblogin server.
    my $central = "https://weblogin.umich.edu/cgi-bin/logout";
    my $query_string = "";

    # expire and nullify service cookie
    print( "Set-Cookie: $ENV{ COSIGN_SERVICE }=null; path=/; expires=Wednesday, 27-Jan-77 00:00:00 GMT; secure\n" );

    if ( $ENV{ QUERY_STRING } =~ m|^(https?://.*)$| ) {
      $query_string = "?$1";
    }

    # perform any local cleanup here

    # redirect to central weblogin server
    print( "Location: $central$query_string\n\n" );

    exit ( 0 );
  }
}

if ( $cgi->param('changeuser') == 1 )  
{
  $alias = $cgi->param('newuser');
  if ($crms->GetUserName($alias))
  {
    if ($alias eq $ru)
    {
      $crms->ChangeAliasUserName($ru, '');
    }
    else
    {
      $crms->ChangeAliasUserName($ru, $alias);
    }
  }
  $cgi->delete_all();
}
my $user = ($alias)? $alias:$ru;
if ($user ne $ru)
{
  $crms = CRMS->new(
            logFile      =>   "$DLXSROOT/prep/c/crms/log_review.txt",
            configFile   =>   "$DLXSROOT/bin/c/crms/crms.cfg",
            verbose      =>   0,
            root         =>   $DLXSROOT,
            dev          =>   $DLPS_DEV,
            user         =>   $user,
            );
}

if  (  $cgi->param('p') eq 'confirmReview' )  
{

  if ($cgi->param( 'submit' ) eq 'Cancel')
  {
    my $id         = $cgi->param('barcode');
    $crms->UnlockItem( $id, $user);
    $cgi->delete_all();
  }
  else
  {
    #Remove all locks for this user.
    my $EncRights  = $cgi->param('rights');
    my $comment    = $cgi->param('comment');
    my $category   = $cgi->param('category');
    my $renNum     = $cgi->param('renNum');
    my $renDate    = $cgi->param('renDate');
    my $id         = $cgi->param('barcode');
    my $editing    = $cgi->param('editing');
    my $navright   = $cgi->param('navRight');

    my ( $rights, $reason ) = $crms->GetAttrReasonFromCode($EncRights);

    my $errorMsg1 = $crms->HasItemBeenReviewedByTwoReviewers ( $id, $user );

    my $errorMsg = $crms->ValidateSubmission2( $rights, $reason, $comment, $category, $renNum, $renDate, $user );
  
    if ( ( $errorMsg ) || ( $errorMsg1 ) )
    {
      #clear the cgi
      $cgi->delete_all();
      $cgi->param('p', 'review' );
      if ( $errorMsg1 )
      {
        $cgi->param('errorMsg', $errorMsg1 );
      }
      else
      {
        $cgi->param('errorMsg', $errorMsg );
      }
      $cgi->param('barcode', $id );
      $cgi->param('navRight', $navright );

      $cgi->param('rights',   $EncRights);
      $cgi->param('reason',   $reason);
      $cgi->param('comm',     $comment );
      $cgi->param('category', $category);
      $cgi->param('renNum',   $renNum );
      $cgi->param('renDate',  $renDate);
      $cgi->param('editing',  $editing);
    }
    else
    {
      #Process the submission, and go on to the next item
      my $id     = $cgi->param('barcode');
      my $copyDate;
      my $expert;
      if ( $crms->IsUserExpert ( $user ) ) { $expert = 2; }

      $crms->SubmitReview($id, $user, $rights, $reason, $copyDate, $comment, $renNum, $expert, $renDate, $category);
      if  ( $editing )
      {
        $cgi->delete_all();
        my $output = qq(<script type="text/javascript" language="JavaScript">window.close();</script>);
        print "Content-type: text/html\n\n";
        print $output;
      }
      else
      {
        $cgi->delete_all();
        $cgi->param('p', 'review' );
        $cgi->param('navRight', $navright );
      }
    }
  }
}


if  (  $cgi->param('download')  )  
{

    my $order              = $cgi->param('order');
    my $direction          = $cgi->param('direction');

    my $search1            = $cgi->param('search1');
    my $search1value       = $cgi->param('search1value');
    my $op1                = $cgi->param('op1');

    my $search2            = $cgi->param('search2');
    my $search2value       = $cgi->param('search2value');

    my $startDate          = $cgi->param('startDate');
    my $endDate            = $cgi->param('endDate');
    my $offset             = $cgi->param('offset');

    my $type               = $cgi->param('p');

    my $success = $crms->SearchAndDownload ( $order, $direction, $search1, $search1value, $op1, $search2, $search2value, $startDate, $endDate, $offset, $type );

    if ( $success )
    {
      exit;
    }
}



if ( ! $user || ! $ENV{'HTTPS'} ) 
{
    print $cgi->redirect( "https://$ENV{'HTTP_HOST'}$ENV{'SCRIPT_NAME'}" );
    exit;
}

## config options for TT
my $config = 
{
    INCLUDE_PATH => '.',
    INTERPOLATE  => 1,     ## expand "$var" in plain text
    POST_CHOMP   => 1,     ## cleanup whitespace
    EVAL_PERL    => 1,     ## evaluate Perl code blocks
    ENCODING     => 'UTF-8',

};

## make sure user known
if ( ! $crms->GetUserName($user) )
{
    print $cgi->header( -status => "403 Forbidden" ) .
          "<h2>Forbidden</h2> (unknown user '$user')";
    exit;
}

my $tt   = Template->new( $config );
my $vars = {
    title     => "CRMS",
    crms      => $crms,
    cgi       => $cgi,
    user      => $user,
    yesterday => POSIX::strftime("%Y-%m-%d %H:%M:%S", localtime(time-86400))
};

## the template page (tt) is called based on the CGI 'p' param (ex editReviews -> editReviews.tt)
## the default is home.tt in case a tt is not found
my $page  = $cgi->param('p');
my $input = $page . ".tt";
if ( ! -f $input ) { $input = "home.tt"; }


print $cgi->header( -charset => 'utf-8', "cache-control" => 'private' );
$tt->process($input, $vars) || die $tt->error();
if ($cgi->param('debug'))
{
  print '<br/><br/>';
  eval {
    foreach my $k (keys %ENV)
    {
      printf "$k: %s<br/>\n", $ENV{$k};
    }
  }
}

